generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  MessageID Int    @id @default(autoincrement())
  Message   String @db.VarChar
  UserID    Int
  StreamerID  String @db.VarChar
  User      User   @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserID")
}

model StreamerIdentifier {
  StreamerID                   String @id @db.VarChar
  UserID                     Int    @unique
  User                       User   @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserID")
  User_User_StreamIDToStream User[] @relation("User_StreamIDToStream")

  @@index([UserID], map: "fki_FK_UserID")
  @@map("Stream")
}

model User {
  UserID                          Int                 @id @default(autoincrement())
  FirstName                       String              @db.VarChar
  Infix                           String?             @db.VarChar
  LastName                        String              @db.VarChar
  Email                           String              @unique @db.VarChar
  Password                        String              @db.VarChar
  SSN                             String              @db.VarChar
  PhoneNumber                     String              @db.VarChar
  Address                         String              @db.VarChar
  PostalCode                      String              @db.VarChar
  Birthdate                       DateTime            @db.Date
  Country                         String              @db.VarChar
  StreamerID                        String?             @db.VarChar
  SatoshiID                       Int?
  Log                             Log[]
  Message                         Message[]
  Satoshi                         Satoshi[]
  Stream                          StreamerIdentifier?
  Satoshi_User_SatoshiIDToSatoshi Satoshi?            @relation("User_SatoshiIDToSatoshi", fields: [SatoshiID], references: [SatoshiAccountID], onDelete: NoAction, onUpdate: NoAction, map: "SatoshiID")
  Stream_User_StreamIDToStream    StreamerIdentifier? @relation("User_StreamIDToStream", fields: [StreamerID], references: [StreamerID], onDelete: NoAction, onUpdate: NoAction, map: "StreamerID")
}

model Log {
  LogID   Int    @id @default(autoincrement())
  UserID  Int
  LogText String @db.VarChar
  User    User   @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserID")
}

model Satoshi {
  UserID                       Int
  SatoshiAccountID             Int      @id @default(autoincrement())
  Amount                       Decimal? @db.Decimal
  User                         User     @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "UserID")
  User_User_SatoshiIDToSatoshi User[]   @relation("User_SatoshiIDToSatoshi")
}
